import { Core } from "../core/core.uts"

/**
   @Name    :	颜色
   @description Copy某大佬kux-color插件（https://ext.dcloud.net.cn/plugin?id=15766）
   @Author  :   UxFrame
   @Date    :   2024-01-09 21:52:22
*/
export class useColor {
	
	private core: Core
	
	constructor(core: Core) {
		this.core = core
	}
	
	/**
	 * hexToRgba 修改透明度
	 *
	 * @param {String} hex 颜色值
	 * @param {Number} alpha 透明度
	 * @return String
	 */
	hexToRgba = (hex : string | null, alpha : number) : string => {
		if (hex == null || hex == '' || hex == 'transparent') {
			return 'transparent'
		}
	
		hex = this.parseColor(hex.toLowerCase())
	
		let f = (hex : string, alpha : number) : string => {
			let r = parseInt(hex.slice(1, 3), 16)
			let g = parseInt(hex.slice(3, 5), 16)
			let b = parseInt(hex.slice(5, 7), 16)
	
			return `rgba(${r},${g},${b},${alpha})`
		}
	
		if (hex.length == 7 && hex.startsWith('#')) {
			return f(hex, alpha)
		} else if (hex.startsWith('rgb')) {
			hex = this.rgbToHex(hex)
	
			if (hex == '') {
				return 'transparent'
			}
	
			return f(hex, alpha)
		} else {
			console.error(`[ux-frame]配置错误: ${hex} 仅支持hex和rgba颜色值`);
		}
	
		return 'transparent'
	}
	
	/**
	 * rgbToHex 
	 * @param {String} rgb 颜色值
	 * @return String
	 */
	rgbToHex = (rgb : string) : string => {
		const reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/
		if (/^(rgb|RGB)/.test(rgb)) {
			const aColor = rgb.replace(/(?:\(|\)|rgb|RGB)*/g, '').split(',')
			let strHex = '#'
			for (let i = 0; i < aColor.length; i++) {
				let hex = aColor[i]
				hex = hex.length == 1 ? `${0}${hex}` : hex // 保证每个rgb的值为2位
				if (hex == '0') {
					hex += hex
				}
				strHex += hex
			}
			if (strHex.length != 7) {
				strHex = rgb
			}
			return strHex
		} else if (reg.test(rgb)) {
			const aNum = rgb.replace(/#/, '').split('')
			if (aNum.length == 6) {
				return rgb
			} if (aNum.length == 3) {
				let numHex = '#'
				for (let i = 0; i < aNum.length; i += 1) {
					numHex += (aNum[i] + aNum[i])
				}
				return numHex
			}
		}
	
		return rgb
	}
	
	/**
	* 十六进制转换为rgb或rgba,返回的格式为 rgba（255，255，255，0.5）字符串
	* sHex为传入的十六进制的色值
	* alpha为rgba的透明度
	*/
	colorToRgba = (color : string, alpha : number) : string => {
		color = this.rgbToHex(color)
	
		// 十六进制颜色值的正则表达式
		const reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/
	
		// 16进制颜色转为RGB格式
		let sColor = color.toLowerCase()
		if (sColor != '' && reg.test(sColor)) {
			if (sColor.length == 4) {
				let sColorNew = '#'
				for (let i = 1; i < 4; i += 1) {
					sColorNew += sColor.slice(i, i + 1).concat(sColor.slice(i, i + 1))
				}
				sColor = sColorNew
			}
	
			// 处理六位的颜色值
			const sColorChange = [] as number[]
			for (let i = 1; i < 7; i += 2) {
				sColorChange.push(parseInt(`0x${sColor.slice(i, i + 2)}`))
			}
	
			return `rgba(${sColorChange.join(',')},${alpha})`
		}
	
		return sColor
	}
	
	/**
	 * 求两个颜色之间的渐变值
	 * @param {string} startColor 开始的颜色
	 * @param {string} endColor 结束的颜色
	 * @param {number} step 颜色等分的份额
	 * */
	colorGradient = (startColor : string, endColor : string, step : number) : string[] => {
		
		let _hexToRgb = (sColor : string) : number[] => {
			const reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/
			sColor = sColor.toLowerCase()
			if (sColor != '' && reg.test(sColor)) {
				if (sColor.length == 4) {
					let sColorNew = '#'
					for (let i = 1; i < 4; i += 1) {
						sColorNew += sColor.slice(i, i + 1).concat(sColor.slice(i, i + 1))
					}
					sColor = sColorNew
				}
				
				// 处理六位的颜色值
				const sColorChange = [] as number[]
				for (let i = 1; i < 7; i += 2) {
					sColorChange.push(parseInt(`0x${sColor.slice(i, i + 2)}`))
				}
		
				return sColorChange
			} if (/^(rgb|RGB)/.test(sColor)) {
				const arr = sColor.replace(/(?:\(|\)|rgb|RGB)*/g, '').split(',')
				return arr.map((val: string): number => parseInt(val))
			}
			
			return []
		}
		
		// 转换为rgb数组模式
		const startRGB = _hexToRgb(startColor)
		const endRGB = _hexToRgb(endColor)
		
		if(startRGB.length == 0 || endRGB.length == 0) {
			return [startColor, endColor]
		}
		
		const startR = startRGB[0]
		const startG = startRGB[1]
		const startB = startRGB[2]
		const endR = endRGB[0]
		const endG = endRGB[1]
		const endB = endRGB[2]
	
		const sR = (endR - startR) / step // 总差值
		const sG = (endG - startG) / step
		const sB = (endB - startB) / step
		const colorArr = [] as string[]
		for (let i = 0; i < step; i++) {
			// 计算每一步的hex值
			let hex = this.rgbToHex(`rgb(${Math.round((sR * i + startR))},${Math.round((sG * i + startG))},${Math.round((sB
				* i + startB))})`)
			// 确保第一个颜色值为startColor的值
			if (i == 0) hex = this.rgbToHex(startColor)
			// 确保最后一个颜色值为endColor的值
			if (i == step - 1) hex = this.rgbToHex(endColor)
			colorArr.push(hex)
		}
		
		return colorArr
	}
	
	parseColor(color: string): string {
		const colors = {  
		    'white': '#ffffff',  
		    'black': '#000000',  
		    'red': '#ff0000',  
		    'green': '#00ff00',  
		    'blue': '#0000ff',  
		    'yellow': '#ffff00',  
		    'cyan': '#00ffff',  
		    'magenta': '#ff00ff',  
		    'lime': '#00ff00',  
		    'maroon': '#800000',  
		    'olive': '#808000',  
		    'silver': '#c0c0c0',  
		    'teal': '#008080',
		}
		
		if(colors[color] == null) {
			return color
		} else {
			return colors[color] as string
		}
	}
}