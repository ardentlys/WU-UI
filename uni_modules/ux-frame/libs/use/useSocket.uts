/**
   @Name    :	web socket
   @Author  :   UxFrame
   @Date    :   2023-12-06 20:49:35
*/

import { Core } from "../core/core.uts"

export default class Socket {
	
	private core: Core
	
	/**
	 * socket
	 */
	private socket : SocketTask | null = null
	
	/**
	 * 连接地址
	 */
	private url : string = ''
	
	/**
	 * 是否连接
	 */
	private isConnected : boolean = false
	
	/**
	 * 关闭连接
	 */
	private isClosed : boolean = false
	
	/**
	 * 心跳包时间索引
	 */
	private timer : number | null = null
	
	/**
	 * 断线重连时间索引
	 */
	private reconnectTimer : number | null = null
	
	/**
	 * 消息队列
	 */
	private msgQueue : Array<string> = []
	
	/**
	 * 消息回调
	 */
	onMsg ?: (msg: any) => void = null
	
	constructor(core: Core) {
		this.core = core
	}
	
	/**
	 * 启动socket
	 */
	connect(url : string) {
		if(this.isConnected) {
			return
		}
		
		try {
			this.url = url
	
			this.openSocket()
	
			this.clearTimer()
			this.reconnectTimer = setInterval(() => {
				if (!this.isConnected && !this.isClosed) {
					this.closeSocket()
	
					setTimeout(() => {
						this.openSocket()
					}, 200)
				}
			}, 20 * 1000)
		} catch (e) {
			console.log(e);
		}
	}
	
	/**
	 * 关闭socket
	 */
	close() {
		try {
			this.closeSocket()
			this.clearTimer()
	
			this.msgQueue = []
			this.isClosed = true
			this.socket = null
		} catch (e) {
			console.log(e);
		}
	}
	
	/**
	 * 发生消息
	 */
	send(data : any) {
		let msg : string
	
		if (typeof data == 'object') {
			msg = JSON.stringify(data)
		} else {
			msg = `${data}`
		}
	
		if (!this.isConnected || this.socket == null) {
			this.msgQueue.push(msg);
		} else {
			this.socket!.send({
				data: msg
			} as SendSocketMessageOptions);
		}
	}
	
	private openSocket() {
		this.socket = uni.connectSocket({
			url: this.url,
			success: () => {
				setTimeout(() => {
					this.onOpen()
				}, 20)
			},
			fail: err => {
				console.log('[ux-socket] 连接Socket失败', err)
			}
		})
	}
	
	private onOpen() {
		if (this.socket == null) {
			return
		}
	
		this.socket!.onOpen((_) => {
			console.log('[ux-socket] 已连接');
			this.isConnected = true
			this.isClosed = false
	
			// 发送心跳包
			this.heartBeat()
	
			// 发送消息队列消息
			for (let i = 0; i < this.msgQueue.length; i++) {
				this.send(this.msgQueue[i])
			}
	
			this.msgQueue = []
		});
	
		this.socket!.onError((_) => {
			console.log('[ux-socket] 连接失败');
			this.isConnected = false
			this.clearTimer()
		});
	
		this.socket!.onClose((_) => {
			console.log('[ux-socket] 已关闭');
			this.isConnected = false
			this.clearTimer()
		})
	
		// 监听socket消息
		this.socket!.onMessage((res) => {
			if (this.isJson(res.data)) {
				let data = JSON.parse(res.data as string) as UTSJSONObject
	
				let heartBeat = data.getBoolean('heartBeat')
				if (heartBeat != null && heartBeat) {
	
				} else {
					this.onMsg?.(res.data)
				}
			} else {
				this.onMsg?.(res.data)
			}
		})
	}
	
	private closeSocket() {
	
		this.isConnected = false
	
		if (this.socket != null) {
			this.socket!.close({
				reason: 'colse'
			} as CloseSocketOptions);
	
			this.socket = null
		}
	}
	
	private heartBeat() {
		this.clearTimer()
	
		this.timer = setInterval(() => {
			this.send({
				id: 0,
				msg: 'HeartBeat'
			})
		}, 15 * 1000)
	}
	
	private clearTimer() {
		if (this.timer != null) {
			clearInterval(this.timer as number)
			this.timer = null
		}
	
		if (this.reconnectTimer != null) {
			clearInterval(this.reconnectTimer as number)
			this.reconnectTimer = null
		}
	}
	
	private isJson(str : any) : boolean {
		if (typeof str == 'string') {
			try {
				var obj = JSON.parse(str as string);
				if (typeof obj == 'object') {
					return true
				} else {
					return false
				}
			} catch (_) {
				return false
			}
		}
	
		return false
	}
}