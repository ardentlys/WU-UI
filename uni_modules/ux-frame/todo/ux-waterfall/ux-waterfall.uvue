<template>
	
</template>

<script>
	
	/**
	 * list-view 高性能滚动列表
	 * @property {Slot}			default  						Slot | 默认slot
	 * @property {Slot}			refresher  						Slot | refresher slot
	 * @property {Slot}			loadmore  						Slot | loadmore slot
	 * @property {Slot}			backtop  						Slot | backtop slot
	 * @property {Boolean}		scrollX = [true|false]  		Boolean | 允许横向滚动 (默认 false)
	 * @property {Boolean}		scrollY = [true|false]  		Boolean | 允许纵向滚动 (默认 false)
	 * @property {Boolean}		rebound = [true|false]  		Boolean | 控制是否回弹效果 (默认 true)
	 * @property {Number}		upperThreshold  				Number | 距顶部/左边多远时（单位px），触发 scrolltoupper 事件（默认 50 ）
	 * @property {Number} 		lowerThreshold 					Number | 距底部/右边多远时（单位px），触发 scrolltolower 事件 （默认 50 ）
	 * @property {Number} 		scrollTop 						Number | 设置竖向滚动条位置 （默认 0 ）
	 * @property {Number}  		scrollLeft						Number | 设置横向滚动条位置（默认 0）
	 * @property {String}  		scrollIntoView					String | 值应为某子元素id（id不能以数字开头）。设置哪个方向可滚动，则在哪个方向滚动到该元素
	 * @property {Boolean}  	scrollWithAnimation = [true|false]  	Boolean | 是否在设置滚动条位置时使用滚动动画，设置false没有滚动动画 (默认 true)
	 * @property {Boolean}  	refresherEnabled = [true|false]  		Boolean | 开启下拉刷新 (默认 false)
	 * @property {Number}  		refresherThreshold  			Number | 设置下拉刷新阈值（默认 45 ）
	 * @property {Number}		refresherMaxDragDistance		Number | 设置下拉最大拖拽距离（单位px）（默认 80 ）
	 * @property {String}		refresherBackground					String | 设置下拉刷新区域背景颜色 (默认 #FFFFFF)
	 * @property {Boolean}		refresherTriggered = [true|false]	Boolean | 设置当前下拉刷新状态，true 表示下拉刷新已经被触发，false 表示下拉刷新未被触发 (默认 false)
	 * @property {Array}		refresherStates						Array | 下拉刷新状态文案
	 * @property {Boolean}  	loadmoreEnabled = [true|false]  	Boolean | 开启上拉加载 (默认 false)
	 * @property {Array}		loadmoreStates						Array | 上拉加载状态文案
	 * @property {Boolean}		lastPage							Boolean | 最后一页 没有更多了
	 * @property {Boolean}		showScrollbar = [true|false]		Boolean | 控制是否出现滚动条 (默认 true)
	 * @property {Boolean}		customNestedScroll = [true|false]	Boolean | 子元素是否开启嵌套滚动 将滚动事件与父元素协商处理 (默认 false)
	 * @property {Boolean}		placeholder						Boolean | 底部导航栏高度占位
	 * @property {Array}			xstyle						Array<any> | 自定义样式
	 * @event {Function}		refresherpulling				Function | 下拉刷新控件被下拉
	 * @event {Function}		refresherrefresh				Function | 下拉刷新被触发
	 * @event {Function}		refresherrestore				Function | 下拉刷新被复位
	 * @event {Function}		refresherabort					Function | 下拉刷新被中止
	 * @event {Function}		loadmore						Function | 上拉加载触发
	 * @event {Function}		scrolltoupper					Function | 滚动到顶部/左边，会触发 scrolltoupper 事件
	 * @event {Function}		scrolltolower					Function | 滚动到底部/右边，会触发 scrolltolower 事件
	 * @event {Function}		scroll							Function | 滚动时触发，event.detail = {scrollLeft, scrollTop, scrollHeight, scrollWidth, deltaX, deltaY}
	 * @author UxFrame
	 * @date 2023-11-04 01:12:28
	 */
	export default {
		name: 'ux-list',
		emits: [
			'refresherpulling', 
			'refresherrefresh', 
			'refresherrestore', 
			'refresherabort',
			'loadmore',
			'scrolltoupper', 
			'scrolltolower', 
			'scroll',
			],
		data() {
			return {
				id: '',
				// 滚动距离
				y: 0,
				// 刷新状态
				refresherState: 0,
				// 加载状态
				loadmoreState: 0,
			}
		},
		props: {
			// 允许横向滚动
			scrollX: {
				type: Boolean,
				default: false
			},
			// 允许纵向滚动
			scrollY: {
				type: Boolean,
				default: false
			},
			// 回弹效果
			rebound: {
				type: Boolean,
				default: true
			},
			// 距顶部/左边多远时（单位px），触发 scrolltoupper 事件
			upperThreshold: {
				type: Number,
				default: 50
			},
			// 距底部/右边多远时（单位px），触发 scrolltolower 事件
			lowerThreshold: {
				type: Number,
				default: 50
			},
			// 设置竖向滚动条位置
			scrollTop: {
				type: Number,
				default: 0
			},
			// 设置横向滚动条位置
			scrollLeft: {
				type: Number,
				default: 0
			},
			// 值应为某子元素id（id不能以数字开头）。设置哪个方向可滚动，则在哪个方向滚动到该元素
			scrollIntoView: {
				type: String,
				default: '',
			},
			// 是否在设置滚动条位置时使用滚动动画，设置false没有滚动动画
			scrollWithAnimation: {
				type: Boolean,
				default: true,
			},
			// 开启下拉刷新
			refresherEnabled: {
				type: Boolean,
				default: false,
			},
			// 设置下拉刷新阈值
			refresherThreshold: {
				type: Number,
				default: 45,
			},
			// 设置下拉最大拖拽距离（单位px）
			refresherMaxDragDistance: {
				type: Number,
				default: 80,
			},
			// 设置下拉刷新区域背景颜色
			refresherBackground: {
				type: String,
				default: '#FFFFFF',
			},
			// 设置当前下拉刷新状态，true 表示下拉刷新已经被触发，false 表示下拉刷新未被触发
			refresherTriggered: {
				type: Boolean,
				default: false,
			},
			// 下拉刷新状态文案
			refresherStates: {
				type: Array,
				default: (): string[] => {
					return ['下拉刷新', '释放刷新', '刷新中...', '刷新成功']
				},
			},
			// 开启上拉加载
			loadmoreEnabled: {
				type: Boolean,
				default: false,
			},
			// 下拉加载状态文案
			loadmoreStates: {
				type: Array,
				default: (): string[] => {
					return ['加载中...', '-- 我也是有底线的 --']
				},
			},
			// 最后一页 没有更多了
			lastPage: {
				type: Boolean,
				default: false,
			},
			// 控制是否出现滚动条
			showScrollbar: {
				type: Boolean,
				default: true,
			},
			// 子元素是否开启嵌套滚动 将滚动事件与父元素协商处理
			customNestedScroll: {
				type: Boolean,
				default: false,
			},
			// 返回顶部
			backtop: {
				type: Boolean,
				default: false
			},
			// 底部导航栏高度占位
			placeholder: {
				type: Boolean,
				default: false
			},
			// 自定义样式
			xstyle: {
				type: Array as PropType<Array<any>>,
				default: () : Array<any> => [] as Array<any>
			},
		},
		computed: {
			style(): string {
				let styles = [] as string[]
				
				if(this.scrollX && !this.scrollY) {
					styles.push('flex-direction: row')
				}
				
				return styles.join(';')
			}
		},
		watch: {
			refresherTriggered(a, b) {
				if(a == false && b == true) {
					// 刷新完成
					this.refresherState = 3
				}
			},
			lastPage() {
				this.loadmoreState = this.lastPage ? 1 : 0
			}
		},
		mounted() {
			
		},
		methods: {
			scroll(e: ScrollEvent) {
				
				this.y = e.detail.scrollTop
				
				// 显示置顶不卡顿
				if(this.backtop) {
					let node = (this.$refs['uxBacktop'] as UxBacktopComponentPublicInstance)
					node.$data.set('show', this.y > 300)
				}
				
				this.$emit('scroll', e)
			},
			refresherpulling(e: RefresherEvent) {
				// 释放刷新
				if(this.refresherState == 0 || this.refresherState == 1) {
					if(e.detail.dy > this.refresherThreshold) {
						this.refresherState = 1
					} else {
						this.refresherState = 0
					}
				}
				
				this.$emit('refresherpulling', e)
			},
			refresherrefresh(e: RefresherEvent) {
				// 刷新中
				this.refresherState = 2
				
				this.$emit('refresherrefresh', e)
			},
			refresherrestore(e: RefresherEvent) {
				this.$emit('refresherrestore', e)
				
				// 刷新结束
				setTimeout(() => {
					this.refresherState = 0
				}, 50);
			},
			refresherabort(e: RefresherEvent) {
				this.$emit('refresherabort', e)
				
				// 刷新结束
				setTimeout(() => {
					this.refresherState = 0
				}, 50);
			},
			scrolltoupper(e: ScrollToUpperEvent) {
				this.$emit('scrolltoupper', e)
			},
			scrolltolower(e: ScrollToLowerEvent) {
				// 上拉触底加载
				if(this.loadmoreEnabled) {
					this.$emit('loadmore', e)
				}
				
				this.$emit('scrolltolower', e)
			}
		}
	}
</script>

<style lang="scss">
	.ux-list {
		flex: 1;
	}
</style>