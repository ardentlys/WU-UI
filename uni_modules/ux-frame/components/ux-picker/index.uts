import { $ux } from '../../index.uts'
import { UXPickerData, UXPickerEvent } from '../../libs/types/types.uts'

export const UxPickerMixin = defineMixin({
	emits: ['change'],
	data() {
		return {
			values: [] as number[],
			datas: [] as UXPickerData[][],
		}
	},
	props: {
		// 数据
		data: {
			type: Array as PropType<UXPickerData[][]>,
			default: () : UXPickerData[][] => {
				return [] as UXPickerData[][]
			}
		},
		// 值
		value: {
			type: Array,
			default: () : any[] => {
				return [] as any[]
			}
		},
		// 是否联动
		link: {
			type: Boolean,
			default: false
		},
		// 标题
		title: {
			type: String,
			default: ''
		},
		// 标题颜色
		titleColor: {
			type: String,
			default: $ux.theme.main
		},
		// 内容大小
		size: {
			type: Number,
			default: 15
		},
		// 内容颜色
		color: {
			type: String,
			default: $ux.theme.main
		},
		// 内容选中颜色
		selectColor: {
			type: String,
			default: $ux.theme.main
		},
		// 按钮大小
		btnSize: {
			type: Number,
			default: 14
		},
		// 按钮类型
		btnType: {
			type: String,
			default: 'normal'
		},
		// 确定文字
		confirm: {
			type: String,
			default: '确定'
		},
		// 确定文字颜色
		confirmColor: {
			type: String,
			default: $ux.theme.primary
		},
		// 圆角
		radius: {
			type: Number,
			default: 15
		},
		// 背景色透明度
		opacity: {
			type: Number,
			default: 0.6
		},
		// 允许滑动关闭
		touch: {
			type: Boolean,
			default: false
		},
		// 遮罩层关闭
		maskClose: {
			type: Boolean,
			default: true
		},
		// 是否禁用
		disabled: {
			type: Boolean,
			default: false
		}
	},
	computed: {
		style() : any | null {
			let css = new Map<string, any | null>()

			css.set('border-top-left-radius', $ux.Util.addUnit(this.radius))
			css.set('border-top-right-radius', $ux.Util.addUnit(this.radius))

			return css
		},
		titleStyle() : string {
			return `color: ${this.titleColor}`
		},
		titleBorder() : string {
			return this.btnType == 'normal' || this.title != '' ? '' : `border-bottom: 1rpx solid ${$ux.theme.border}`
		},
		cancelStyle() : any | null {
			let css = new Map<string, any | null>()

			css.set('font-size', $ux.Util.addUnit(this.btnSize))
			css.set('color', $ux.theme.summary)

			return css
		},
		confirmStyle() : any | null {
			let css = new Map<string, any | null>()

			css.set('font-size', $ux.Util.addUnit(this.btnSize))
			css.set('color', this.confirmColor)

			return css
		},
		confirmBorder() : string {
			return this.btnType == 'normal' || this.title != '' ? '' : `border-left: 1rpx solid ${$ux.theme.border}`
		},
		indicatorStyle() : string {
			return `height: 35px;border-top: 1rpx solid ${$ux.theme.border};border-bottom: 1rpx solid ${$ux.theme.border};`
		},
	},
	mounted() {

	},
	methods: {
		textStyle(i : number, index : number) : string {
			return `color: ${this.values[i] == index ? this.selectColor : this.color};font-size: ${$ux.Util.addUnit(this.size)}`
		},
		click() {
			if (this.disabled) {
				return
			}

			if (this.data.length == 0) {
				return
			}

			// 初始数据
			if (this.datas.length == 0) {
				// 联动结构
				if (this.link) {
					this.datas = [this.data[0]]

					// 递归出联动链表
					let f = (items : UXPickerData[] | null) : void => { }
					f = (items : UXPickerData[] | null) : void => {
						if (items == null) {
							return
						}

						let index = items!.findIndex(function (e : UXPickerData) : boolean {
							return e.children != null
						})

						if (index != -1) {
							this.datas.push(items![0].children == null ? [] as UXPickerData[] : items![0].children!)
							f(items![0].children)
						}
					}

					f(this.data[0])
				} else {
					this.datas = this.data
				}

				this.values = []
				for (let i = 0; i < this.datas.length; i++) {
					this.values.push(0)

					if (this.value.length - 1 < i) {
						this.value.push('')
					}
				}
			}

			// 默认值
			for (let i = 0; i < this.values.length; i++) {
				let index = this.datas[i].findIndex((e : UXPickerData) : boolean => e.value.toString() == this.value[i]!.toString()) as number
				this.values[i] = index == -1 ? 0 : index
			}

			setTimeout(() => {
				(this.$refs['uxDrawer'] as UxDrawerComponentPublicInstance).open()
			}, 50);
		},
		change(ev : PickerViewChangeEvent) {
			this.values = ev.detail.value

			// 更新联动链表
			if (this.link) {
				this.values.forEach((index : number, i : number) => {
					if (i > 0) {
						this.datas[i] = this.datas[i - 1][this.values[i - 1]].children ?? [] as UXPickerData[]
					}
				})
			}
		},
		onConfirm() {
			let indexs = this.values.map((i : number, _ : number) : number => {
				return i
			})

			let names =  this.values.map((i : number, index : number) : string => {
				return this.datas[index].length == 0 ? '' : this.datas[index][i].name
			}).filter((val : string) : boolean => val != '')

			let values =  this.values.map((i : number, index : number) : any => {
				return this.datas[index].length == 0 ? '' : this.datas[index][i].value
			}).filter((val : any) : boolean => val.toString() != '')

			this.$emit('change', {
				index: indexs,
				name: names,
				value: values,
			} as UXPickerEvent)

			this.close()
		},
		close() {
			(this.$refs['uxDrawer'] as UxDrawerComponentPublicInstance).close()
		}
	},
})