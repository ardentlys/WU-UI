import { $ux } from '../../index.uts'
import { xstyleMixin } from '../../libs/mixins/xstyle.uts'

export const UxListMixin = defineMixin({
	emits: [
		'refresherpulling', 
		'refresherrefresh', 
		'refresherrestore', 
		'refresherabort',
		'loadmore',
		'scrolltoupper', 
		'scrolltolower', 
		'scroll',
		],
	mixins: [xstyleMixin],
	data() {
		return {
			id: `ux-list_${$ux.Random.uuid()}`,
			// 滚动距离
			y: 0,
			// 刷新状态
			refresherState: 0,
			// 加载状态
			loadmoreState: 0,
		}
	},
	props: {
		// 滚动方向
		direction: {
			type: String,
			default: 'vertical'
		},
		// 回弹效果
		bounces: {
			type: Boolean,
			default: true
		},
		// 距顶部/左边多远时（单位px），触发 scrolltoupper 事件
		upperThreshold: {
			type: Number,
			default: 50
		},
		// 距底部/右边多远时（单位px），触发 scrolltolower 事件
		lowerThreshold: {
			type: Number,
			default: 50
		},
		// 设置竖向滚动条位置
		scrollTop: {
			type: Number,
			default: 0
		},
		// 设置横向滚动条位置
		scrollLeft: {
			type: Number,
			default: 0
		},
		// 值应为某子元素id（id不能以数字开头）。设置哪个方向可滚动，则在哪个方向滚动到该元素
		scrollIntoView: {
			type: String,
			default: '',
		},
		// 是否在设置滚动条位置时使用滚动动画，设置false没有滚动动画
		scrollWithAnimation: {
			type: Boolean,
			default: true,
		},
		// 开启下拉刷新
		refresherEnabled: {
			type: Boolean,
			default: false,
		},
		// 设置下拉刷新阈值
		refresherThreshold: {
			type: Number,
			default: 45,
		},
		// 设置下拉最大拖拽距离（单位px）
		refresherMaxDragDistance: {
			type: Number,
			default: 80,
		},
		// 设置下拉刷新区域背景颜色
		refresherBackground: {
			type: String,
			default: '#FFFFFF',
		},
		// 设置当前下拉刷新状态，true 表示下拉刷新已经被触发，false 表示下拉刷新未被触发
		refresherTriggered: {
			type: Boolean,
			default: false,
		},
		// 下拉刷新状态文案
		refresherStates: {
			type: Array,
			default: (): string[] => {
				return ['下拉刷新', '释放刷新', '刷新中...', '刷新成功']
			},
		},
		// 开启上拉加载
		loadmoreEnabled: {
			type: Boolean,
			default: false,
		},
		// 下拉加载状态文案
		loadmoreStates: {
			type: Array,
			default: (): string[] => {
				return ['加载中...', '-- 我也是有底线的 --']
			},
		},
		// 控制是否出现滚动条
		showScrollbar: {
			type: Boolean,
			default: true,
		},
		// 子元素是否开启嵌套滚动 将滚动事件与父元素协商处理
		customNestedScroll: {
			type: Boolean,
			default: false,
		},
		// 返回顶部
		backtop: {
			type: Boolean,
			default: false
		},
		// 底部导航栏高度占位
		placeholder: {
			type: Boolean,
			default: false
		},
	},
	computed: {
		style(): any[] {
			let css = new Map<string, any | null>()
			
			if(this.direction == 'horizontal') {
				css.set('flex-direction', 'row')
			}
			
			css = $ux.Util.xStyle(css, this.margin, this.mt, this.mr, this.mb, this.ml, this.padding, this.pt, this.pr, this.pb, this.pl)
			
			return [css, this.xstyle]
		}
	},
	watch: {
		refresherTriggered(a, b) {
			if(a == false && b == true) {
				// 刷新完成
				this.refresherState = 3
			}
		},
	},
	mounted() {
		
	},
	methods: {
		scroll(e: ScrollEvent) {
			
			this.y = e.detail.scrollTop
			
			// 显示置顶不卡顿
			if(this.backtop) {
				let node = (this.$refs['uxBacktop'] as UxBacktopComponentPublicInstance)
				node.$data['show'] = this.y > 300
			}
			
			this.$emit('scroll', e)
		},
		refresherpulling(e: RefresherEvent) {
			// 释放刷新
			if(this.refresherState == 0 || this.refresherState == 1) {
				if(e.detail.dy > this.refresherThreshold) {
					this.refresherState = 1
				} else {
					this.refresherState = 0
				}
			}
			
			this.$emit('refresherpulling', e)
		},
		refresherrefresh(e: RefresherEvent) {
			// 刷新中
			this.refresherState = 2
			
			this.$emit('refresherrefresh', e)
		},
		refresherrestore(e: RefresherEvent) {
			this.$emit('refresherrestore', e)
			
			// 刷新结束
			setTimeout(() => {
				this.refresherState = 0
			}, 50);
		},
		refresherabort(e: RefresherEvent) {
			this.$emit('refresherabort', e)
			
			// 刷新结束
			setTimeout(() => {
				this.refresherState = 0
			}, 50);
		},
		scrolltoupper(e: ScrollToUpperEvent) {
			this.$emit('scrolltoupper', e)
		},
		scrolltolower(e: ScrollToLowerEvent) {
			// 上拉触底加载
			if(this.loadmoreEnabled) {
				this.loadmoreState = 1
				this.$emit('loadmore', e)
			}
			
			this.$emit('scrolltolower', e)
		},
		loadSuccess(lastPage: boolean) {
			this.loadmoreState = lastPage ? 2 : 0
		},
	}
})