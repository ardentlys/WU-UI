import { $ux } from '../../index.uts'
import {UXCountDownTime} from '../../libs/types/types.uts'

export const UxCountDownMixin = defineMixin({
	emits: ['change', 'finish'],
	data() {
		return {
			value: '0',
			formatTime: {
				days: 0,
				hours: 0,
				minutes: 0,
				seconds: 0,
				milliseconds: 0
			} as UXCountDownTime,
			timer: 0,
			runing: false,
			endTime: 0,
			remainTime: 0,
		}
	},
	props: {
		time: {
			type: Number,
			default: 0
		},
		format: {
			type: String,
			default: 'HH:mm:ss'
		},
		millisecond: {
			type: Boolean,
			default: false
		},
		autoplay: {
			type: Boolean,
			default: true
		},
		size: {
			type: Number,
			default: 14
		},
		color: {
			type: String,
			default: $ux.theme.main
		},
		bold: {
			type: Boolean,
			default: false
		},
		xstyle: {
			type: Array as PropType<Array<any>>,
			default: () : Array<any> => [] as Array<any>
		}
	},
	computed: {
		style() : any | null {
			let css = new Map<string, any | null>()
			
			css.set('color', this.color)
			css.set('font-size', $ux.Util.addUnit(this.size))
			css.set('font-weight', this.bold ? 'bold' : 'normal')
	
			return css
		},
	},
	watch: {
		time() {
			this.init()
		},
	},
	mounted() {
		this.init()
	},
	destroyed() {
		this.clearTimeout()
	},
	methods: {
		init() {
			this.reset()
		},
		reset() {
			this.pause()
	
			this.remainTime = this.time
			this.setRemainTime(this.remainTime)
	
			if (this.autoplay) {
				this.start()
			}
		},
		start() {
			if (this.runing) return
	
			this.runing = true
			this.endTime = Date.now() + this.remainTime
	
			this.toTick()
		},
		pause() {
			this.runing = false;
			this.clearTimeout()
		},
		toTick() {
			if (this.millisecond) {
				this.microTick()
			} else {
				this.macroTick()
			}
		},
		macroTick() {
			this.clearTimeout()
	
			this.timer = setTimeout(() => {
				const remain = this.getRemainTime()
	
				if (!this.isSameSecond(remain, this.remainTime) || remain == 0) {
					this.setRemainTime(remain)
				}
	
				if (this.remainTime != 0) {
					this.macroTick()
				}
			}, 30)
		},
		microTick() {
			this.clearTimeout()
	
			this.timer = setTimeout(() => {
				this.setRemainTime(this.getRemainTime())
	
				if (this.remainTime != 0) {
					this.microTick()
				}
			}, 50)
		},
		getRemainTime() : number {
			return Math.max(this.endTime - Date.now(), 0)
		},
		setRemainTime(remain : number) {
			this.remainTime = remain
	
			this.formatTime = this.parseTimeData(remain)
			this.$emit('change', this.formatTime)
	
			this.value = this.parseFormat(this.format, this.formatTime)
	
			if (remain <= 0) {
				this.pause()
				this.$emit('finish')
			}
		},
		clearTimeout() {
			clearTimeout(this.timer)
			this.timer = 0
		},
		isSameSecond(time1 : number, time2 : number) : boolean {
			return Math.floor(time1 / 1000) == Math.floor(time2 / 1000)
		},
		parseTimeData(time : number) : UXCountDownTime {
			const SECOND = 1000
			const MINUTE = 60 * SECOND
			const HOUR = 60 * MINUTE
			const DAY = 24 * HOUR
	
			const days = Math.floor(time / DAY)
			const hours = Math.floor((time % DAY) / HOUR)
			const minutes = Math.floor((time % HOUR) / MINUTE)
			const seconds = Math.floor((time % MINUTE) / SECOND)
			const milliseconds = Math.floor(time % SECOND)
	
			return {
				days,
				hours,
				minutes,
				seconds,
				milliseconds
			} as UXCountDownTime
		},
		parseFormat(format : string, timeData : UXCountDownTime) : string {
			let {
				days,
				hours,
				minutes,
				seconds,
				milliseconds
			} = timeData
	
			// 如果格式化字符串中不存在DD(天)，则将天的时间转为小时中去
			if (format.indexOf('DD') === -1) {
				hours += days * 24
			} else {
				// 对天补0
				format = format.replace('DD', `${days}`.padStart(2, '0'))
			}
	
			// 其他同理于DD的格式化处理方式
			if (format.indexOf('HH') === -1) {
				minutes += hours * 60
			} else {
				format = format.replace('HH', `${hours}`.padStart(2, '0'))
			}
	
			if (format.indexOf('mm') === -1) {
				seconds += minutes * 60
			} else {
				format = format.replace('mm', `${minutes}`.padStart(2, '0'))
			}
	
			if (format.indexOf('ss') === -1) {
				milliseconds += seconds * 1000
			} else {
				format = format.replace('ss', `${seconds}`.padStart(2, '0'))
			}
	
			return format.replace('SSS', `${milliseconds}`.padStart(3, '0'))
		},
	}
})