import { $ux } from '../../index.uts'

export const UxCollapseItemMixin = defineMixin({
	data() {
		return {
			height: 0,
			opend: false,
			boxNode: null as Element | null,
			contentNode: null as Element | null,
		};
	},
	props: {
		// 标题
		title: {
			type: String,
			default: ''
		},
		// 默认是否打开
		open: {
			type: Boolean,
			default: false
		},
		// 显示下边框
		border: {
			type: Boolean,
			default: true
		},
		// 是否禁用
		disabled: {
			type: Boolean,
			default: false
		}
	},
	computed: {
		borderStyle(): string {
			return this.border? `border-bottom: 1rpx solid ${$ux.theme.border}` : ''
		},
		boxStyle(): string {
			return this.border && this.opend? `border-bottom: 1rpx solid ${$ux.theme.border}` : ''
		}
	},
	watch: {
		open(value : boolean) {
			if (this.boxNode != null) {
				this.onOpen(value)
			}
		}
	},
	created() {
		$ux.Util.$dispatch(this as UxCollapseItemComponentPublicInstance, 'ux-collapse', 'register', this as UxCollapseItemComponentPublicInstance)
	},
	mounted() {
		this.boxNode = this.$refs['boxRef'] as Element;
		this.contentNode = this.$refs['contentRef'] as Element;
	
		setTimeout(() => {
			this.onOpen(this.open)
		}, 20);
	},
	methods: {
		onOpen(open : boolean) {
			if (this.disabled) return
	
			// 关闭其他已打开
			$ux.Util.$dispatch(this as UxCollapseItemComponentPublicInstance, 'ux-collapse', 'cloceAll')
	
			this.opend = open
			this.openCollapse(open)
		},
		openCollapse(open : boolean) {
			let boxNode = this.boxNode?.style!
			let contentNode = this.contentNode?.style!
	
			boxNode.setProperty('display', open ? 'flex' : 'none')
	
			this.$nextTick(() => {
				contentNode.setProperty('transform', open ? 'translateY(0)' : 'translateY(-100%)')
				contentNode.setProperty('opacity', open ? 1 : 0)
			})
		}
	}
})