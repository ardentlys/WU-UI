import { $ux } from '../../index.uts'

export const UxCountToMixin = defineMixin({
	emits: ['end'],
	data() {
		return {
			value: '',
			timer: 0,
			paused: false,
		}
	},
	props: {
		startVal: {
			type: Number,
			default: 0
		},
		endVal: {
			type: Number,
			default: 1000
		},
		duration: {
			type: Number,
			default: 2000
		},
		autoplay: {
			type: Boolean,
			default: true
		},
		decimals: {
			type: Number,
			default: 0
		},
		size: {
			type: Number,
			default: 14
		},
		color: {
			type: String,
			default: $ux.theme.main
		},
		bold: {
			type: Boolean,
			default: false
		},
		xstyle: {
			type: Array as PropType<Array<any>>,
			default: () : Array<any> => [] as Array<any>
		}
	},
	computed: {
		style() : any | null {
			let css = new Map<string, any | null>()
			
			css.set('color', this.color)
			css.set('font-size', $ux.Util.addUnit(this.size))
			css.set('font-weight', this.bold ? 'bold' : 'normal')

			return css
		},
	},
	watch: {
		startVal() {
			this.init()
		},
		endVal() {
			this.init()
		}
	},
	mounted() {
		this.init()
	},
	unmounted() {
		clearInterval(this.timer)
	},
	methods: {
		init() {
			this.value = this.startVal.toString()

			if (this.autoplay) {
				this.start()
			}
		},
		start() {
			clearInterval(this.timer)

			this.paused = false
			this.value = this.startVal.toString()
			this.play()
		},
		pause() {
			if (!this.paused) {
				this.paused = true
				clearInterval(this.timer)
			}
		},
		resume() {
			if (this.paused) {
				clearInterval(this.timer)

				this.paused = false
				this.play()
			}
		},
		stop() {
			this.value = this.endVal.toFixed(this.decimals).toString()
			this.$emit('end')
			clearInterval(this.timer)
		},
		play() {
			const step : number = this.endVal / (this.duration / 10)
			this.timer = setInterval(() => {
				if (!this.paused) {
					const random : number = $ux.Random.random(0, step)
					const count : number = parseFloat(this.value) + random
					if (count >= this.endVal) {
						this.stop()
					} else {
						this.value = (count + $ux.Random.generateRandom(this.decimals) / 100).toFixed(this.decimals).toString()
					}
				}
			}, 10)
		}
	},
})