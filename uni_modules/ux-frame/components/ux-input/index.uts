import { $ux } from '../../index.uts'
import { xstyleMixin } from '../../libs/mixins/xstyle.uts'

export const UxInputMixin = defineMixin({
	mixins: [xstyleMixin],
	emits: ['update:modelValue', 'input', 'focus', 'blur', 'confirm', 'clear', 'keyboardheightchange'],
	data() {
		return {
			innerValue: '',
			focused: false,
		}
	},
	props: {
		theme: {
			type: String,
			default: 'primary'
		},
		name: {
			type: String,
			default: ''
		},
		value: {
			type: String,
			default: ''
		},
		modelValue: {
			type: String,
			default: ''
		},
		type: {
			type: String,
			default: 'text'
		},
		password: {
			type: Boolean,
			default: false
		},
		clearable: {
			type: Boolean,
			default: false
		},
		showWords: {
			type: Boolean,
			default: false
		},
		placeholder: {
			type: String,
			default: ''
		},
		placeholderStyle: {
			type: String,
			default: ''
		},
		placeholderClass: {
			type: String,
			default: ''
		},
		maxlength: {
			type: Number,
			default: 140
		},
		cursorSpacing: {
			type: Number,
			default: 0
		},
		autoFocus: {
			type: Boolean,
			default: false
		},
		focus: {
			type: Boolean,
			default: false
		},
		confirmType: {
			type: String,
			default: 'done'
		},
		confirmHold: {
			type: Boolean,
			default: false
		},
		cursor: {
			type: Number,
			default: 0
		},
		fixed: {
			type: Boolean,
			default: false
		},
		selectionStart: {
			type: Number,
			default: 0
		},
		selectionEnd: {
			type: Number,
			default: 0
		},
		adjustPosition: {
			type: Boolean,
			default: true
		},
		align: {
			type: String,
			default: 'left'
		},
		size: {
			type: Number,
			default: 13
		},
		color: {
			type: String,
			default: $ux.theme.main
		},
		background: {
			type: String,
			default: 'transparent'
		},
		prefix: {
			type: String,
			default: ''
		},
		prefixStyle: {
			type: String,
			default: ''
		},
		suffix: {
			type: String,
			default: ''
		},
		suffixStyle: {
			type: String,
			default: ''
		},
		iconSize:{
			type: Number,
			default: 16
		},
		customFont: {
			type: String,
			default: ''
		},
		customFamily: {
			type: String,
			default: ''
		},
		border: {
			type: String,
			default: 'surround'
		},
		readonly: {
			type: Boolean,
			default: false
		},
		shape: {
			type: String,
			default: 'square'
		},
		disabled: {
			type: Boolean,
			default: false
		},
	},
	computed: {
		_theme() : string {
			switch (this.theme) {
				case 'info':
					return $ux.theme.main!
				case 'primary':
					return $ux.theme.primary!
				case 'warn':
					return $ux.theme.warn!
				case 'success':
					return $ux.theme.success!
				case 'error':
					return $ux.theme.error!
				case 'title': 
					return $ux.theme.title!
				default:
					return $ux.theme.main!
			}
		},
		_color() : string {
			if(this.color != '') {
				return this.color
			}
			
			return this._theme
		},
		style() : any[] {
			let css = new Map<string, any | null>()
			
			css.set('border-radius', `${this.shape == 'circle' ? $ux.Util.addUnit(100) : $ux.Util.addUnit(4)}`)
			css.set('background-color', this.disabled ? '#f6f6f6' : this.background)
			
			if(this.border == 'surround') {
				css.set('border', `1px solid ${this.focused ? this._theme : $ux.theme.border}`)
			} else if(this.border == 'bottom') {
				css.set('border-bottom', `1px solid ${this.focused ? this._theme : $ux.theme.border}`)
			}
			
			css = $ux.Util.xStyle(css, this.margin, this.mt, this.mr, this.mb, this.ml, this.padding, this.pt, this.pr, this.pb, this.pl)
			
			return [css, this.xstyle]
		},
		inputStyle() : any | null {
			let css = new Map<string, any | null>()
			
			css.set('text-align', this.align)
			css.set('color', this.disabled ? $ux.theme.disabled : this._color)
			css.set('font-size', $ux.Util.addUnit(this.size))
			css.set('padding', `${$ux.Util.addUnit(5)} ${this.suffix == '' && this.$slots['suffix'] == null ? $ux.Util.addUnit(10) : 0} ${$ux.Util.addUnit(5)} ${this.prefix == '' && this.$slots['prefix'] == null? $ux.Util.addUnit(10) : 0}`)
			
			return css
		},
	},
	watch: {
	    value: {
	        immediate: true,
	        handler(newVal: string, _: string) {
	            this.innerValue = newVal
	        },
	    },
		modelValue: {
		    immediate: true,
		    handler(newVal: string, _: string) {
		        this.innerValue = newVal
		    },
		},
	},
	methods: {
		inputChange(e: InputEvent) {
			this.innerValue = e.detail.value
			
			this.$emit('update:modelValue', this.innerValue)
			this.$emit('input', this.innerValue)
		},
		focusChange(e: InputFocusEvent) {
			this.focused = true
			this.innerValue = e.detail.value
			
			this.$emit('focus', this.innerValue)
		},
		blurChange(e: InputBlurEvent) {
			this.innerValue = e.detail.value
			this.focused = false
			
			this.$emit('blur', this.innerValue)
		},
		confirmChange(e: InputConfirmEvent) {
			this.innerValue = e.detail.value
			
			this.$emit('confirm', this.innerValue)
		},
		keyboardheightChange(e: InputKeyboardHeightChangeEvent) {
			this.$emit('keyboardheightchange', e)
			
			this.focused = e.detail.height as number != 0
		},
		onClear(e: MouseEvent) {
			this.innerValue = ''
			
			this.$emit('clear', '')
			this.$emit('update:modelValue', '')
			this.$emit('input', '')
			
			e.stopPropagation()
		}
	}
})