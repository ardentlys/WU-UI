import { $ux } from '../../index.uts'
import { xstyleMixin } from '../../libs/mixins/xstyle.uts'

export const UxButtonMixin = defineMixin({
	emits: ['click', 'longpress', 'touchstart', 'touchend', 'touchmove', 'touchcancel'],
	mixins: [xstyleMixin],
	data() {
		return {
	
		};
	},
	props: {
		// 按钮类型
		type: {
			type: String,
			default: 'info'
		},
		// 按钮文字
		text: {
			type: String,
			default: ''
		},
		// 按钮文字颜色
		color: {
			type: String,
			default: ''
		},
		// 按钮文字大小
		size: {
			type: Number,
			default: 12
		},
		// 按钮文字加粗
		bold: {
			type: Boolean,
			default: false
		},
		// 按钮背景颜色
		background: {
			type: String,
			default: ''
		},
		// 圆角
		corner: {
			type: Number,
			default: 5
		},
		// 是否镂空
		plain: {
			type: Boolean,
			default: false
		},
		// 显示加载中
		loading: {
			type: Boolean,
			default: false
		},
		// 加载中类型
		loadingType: {
			type: String,
			default: 'spinner'
		},
		// 加载中文字
		loadingText: {
			type: String,
			default: '加载中...'
		},
		// 加载中文字大小
		loadingSize: {
			type: Number,
			default: 12
		},
		// 加载中文字颜色
		loadingColor: {
			type: String,
			default: '#999999'
		},
		// 图标
		icon: {
			type: String,
			default: ''
		},
		// 图标大小
		iconSize: {
			type: Number,
			default: 14
		},
		// 图标颜色
		iconColor: {
			type: String,
			default: ''
		},
		// 自定义字体路径
		customFont: {
			type: String,
			default: ''
		},
		// 自定义字体family
		customFamily: {
			type: String,
			default: ''
		},
		// 布局方向
		direction: {
			type: String,
			default: 'row'
		},
		// 点击跳转的页面路径
		path: {
			type: String,
			default: ''
		},
		// 节流时间，单位毫秒
		throttleTime: {
			type: Number,
			default: 0
		},
		// 点击态出现时间，单位毫秒
		hoverStartTime: {
			type: Number,
			default: 0
		},
		// 点击态保留时间，单位毫秒
		hoverStayTime: {
			type: Number,
			default: 100
		},
		// 是否显示点击态
		hover: {
			type: Boolean,
			default: true
		},
		// 阻止向上冒泡
		stopPropagation: {
			type: Boolean,
			default: false
		},
	},
	computed: {
		_color(): string {
			if(this.plain) {
				if (this.type == 'text') {
					return this.color == '' ? $ux.theme.main! : this.color
				} else if (this.type == 'info') {
					return this.color == '' ? $ux.theme.main! : this.color
				} else if (this.type == 'primary') {
					return $ux.theme.primary!
				} else if (this.type == 'success') {
					return $ux.theme.success!
				} else if (this.type == 'warn') {
					return $ux.theme.warn!
				} else if (this.type == 'error') {
					return $ux.theme.error!
				}
			} else {
				if (this.type == 'text') {
					return this.color == '' ? $ux.theme.main! : this.color
				} else if (this.type == 'info') {
					return this.color == '' ? $ux.theme.main! : this.color
				} else if (this.type == 'primary') {
					return '#ffffff'
				} else if (this.type == 'success') {
					return '#ffffff'
				} else if (this.type == 'warn') {
					return '#ffffff'
				} else if (this.type == 'error') {
					return '#ffffff'
				}
			}
			
			return 'transparent'
		},
		_background(): string {
			if(this.background != '') {
				return this.background
			}
			
			if(this.plain) {
				return 'transparent'
			} else {
				if (this.type == 'text') {
				
				} else if (this.type == 'info') {
					
				} else if (this.type == 'primary') {
					return $ux.theme.primary!
				} else if (this.type == 'success') {
					return $ux.theme.success!
				} else if (this.type == 'warn') {
					return $ux.theme.warn!
				} else if (this.type == 'error') {
					return $ux.theme.error!
				}
			}
			
			return 'transparent'
		},
		_border(): string {
			if (this.type == 'text') {
			
			} else if (this.type == 'info') {
				return $ux.theme.border!
			} else if (this.type == 'primary') {
				return $ux.theme.primary!
			} else if (this.type == 'success') {
				return $ux.theme.success!
			} else if (this.type == 'warn') {
				return $ux.theme.warn!
			} else if (this.type == 'error') {
				return $ux.theme.error!
			}
			
			return 'transparent'
		},
		style() : any[] {
			let css = new Map<string, any | null>()
			
			css.set('flex-direction', this.direction)
			
			if(this.disabled) {
				css.set('border', `1rpx solid ${$ux.Color.hexToRgba(this._border, 0.6)}`)
				css.set('background-color', $ux.Color.hexToRgba(this._background, 0.6))
			} else {
				css.set('border', `1rpx solid ${this._border}`)
				css.set('background-color', this._background)
			}
			
			css.set('box-sizing', 'border-box')
			css.set('border-radius', $ux.Util.addUnit(this.corner))
			css.set('padding', '6px 10px')
	
			css = $ux.Util.xStyle(css, this.margin, this.mt, this.mr, this.mb, this.ml, this.padding, this.pt, this.pr, this.pb, this.pl)
	
			return [css, this.xstyle]
		},
		textStyle() : any | null {
			let css = new Map<string, any | null>()
	
			css.set('font-size', $ux.Util.addUnit(this.size))
			css.set('color', this.disabled ? $ux.theme.disabled : this._color)
			css.set('font-weight', this.bold?'bold':'normal')
			
			if (this.icon != '') {
				if(this.direction == 'row') {
					css.set('margin-left', '4px')
				} else {
					css.set('margin-top', '4px')
				}
			}
	
			return css
		},
	},
	methods: {
		click(e : MouseEvent) {
			if (this.disabled || this.loading) {
				return
			}
	
			let f = () : void => {
				if (this.path != '') {
					uni.navigateTo({
						url: this.path
					})
				} else {
					this.$emit('click')
				}
	
				if (this.stopPropagation) {
					e.stopPropagation()
				}
			}
			
			$ux.Util.throttle(f, this.throttleTime)
		},
		longpress(e : TouchEvent) {
			if (this.disabled || this.loading) {
				return
			}
	
			this.$emit('longpress', e)
		},
		touchstart(e : TouchEvent) {
			if (this.disabled) {
				return
			}
	
			this.$emit('touchstart', e)
	
			// 模拟点击态
			this.startHover()
		},
		touchend(e : TouchEvent) {
			if (this.disabled) {
				return
			}
	
			this.$emit('touchend', e)
	
			// 结束点击态
			this.endHover()
		},
		touchmove(e : TouchEvent) {
			if (this.disabled) {
				return
			}
	
			this.$emit('touchmove', e)
		},
		touchcancel(e : TouchEvent) {
			if (this.disabled) {
				return
			}
	
			this.$emit('touchcancel', e)
	
			// 结束点击态
			this.endHover()
		},
		startHover() {
			if (!this.hover) {
				return
			}
	
			setTimeout(() => {
				if (this._background == '' || this._background == 'transparent' || this.plain) {
					(this.$refs['uxButton'] as Element).style.setProperty('background-color', '#e5e5e5')
				} else {
					let color = $ux.Color.hexToRgba(this._background, 0.6) as string
					(this.$refs['uxButton'] as Element).style.setProperty('background-color', color)
				}
			}, this.hoverStartTime)
		},
		endHover() {
			if (!this.hover) {
				return
			}
	
			setTimeout(() => {
				if (this._background == '' || this.plain) {
					(this.$refs['uxButton'] as Element).style.setProperty('background-color', 'transparent')
				} else {
					(this.$refs['uxButton'] as Element).style.setProperty('background-color', this._background)
				}
			}, this.hoverStayTime)
		}
	},
})