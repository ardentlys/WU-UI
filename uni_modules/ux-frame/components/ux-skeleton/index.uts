import { $ux } from '../../index.uts'

export const UxSkeletonMixin = defineMixin({
	data() {
		return {
			timer1: 0,
			timer2: 0,
		};
	},
	props: {
		loading: {
			type: Boolean,
			default: true
		},
		animate: {
			type: Boolean,
			default: true
		},
		duration: {
			type: Number,
			default: 1500
		},
		rows: {
			type: Array as PropType<Array<string>>,
			default: () : Array<string> => [] as Array<string>
		},
		height: {
			type: Array as PropType<Array<number>>,
			default: () : Array<number> => [18] as Array<number>
		},
		spacing: {
			type: Number,
			default: 5
		},
		avatar: {
			type: Boolean,
			default: false
		},
		avatarWidth: {
			type: Number,
			default: 32
		},
		avatarHeight: {
			type: Number,
			default: 32
		},
		shape: {
			type: String,
			default: 'square'
		},
		background: {
			type: String,
			default: 'linear-gradient(left right, #F1F2F4, #e6e6e6)'
		},
	},
	computed: {
		warpStyle(): any | null {
			let css = new Map<string, any | null>()
			
			css.set('flex-direction', this.avatar ? 'row' : 'column')
			
			return css
		},
		avatarStyle(): any | null {
			let css = new Map<string, any | null>()
			
			css.set('width', $ux.Util.addUnit(this.avatarWidth))
			css.set('height', $ux.Util.addUnit(this.avatarHeight))
			css.set('border-radius', this.shape == 'square' ? $ux.Util.addUnit(5) : $ux.Util.addUnit(this.avatarWidth))
			css.set('margin-top', $ux.Util.addUnit(this.spacing))
			css.set('background', this.background)
			
			return css
		},
	},
	watch: {
		loading() {
			// TODO 状态切换后动画失效，未知Bug
			this.init()
		},
		animate() {
			this.init()
		}
	},
	mounted() {
		this.startAnim()
	},
	destroyed() {
		clearTimeout(this.timer1)
		clearTimeout(this.timer2)
	},
	methods: {
		init() {
			setTimeout(() => {
				this.startAnim()
			}, 100);
		},
		rowStyle(width: string, index: number): any | null {
			let css = new Map<string, any | null>()
			
			css.set('width', $ux.Util.addUnit(width))
			css.set('height', $ux.Util.addUnit(this.rowHeight(index)))
			css.set('margin-top', $ux.Util.addUnit(this.spacing))
			css.set('background', this.background)
			
			return css
		},
		rowHeight(index: number): number {
			if(this.height.length == 0) {
				return 18
			}
			
			if(index <= this.height.length - 1) {
				return this.height[index]
			}
			
			return this.height[0]
		},
		startAnim() {
			this.alpha(this.$refs['uxSkeletionAvatar'])
			
			if(this.$refs['uxSkeletionAnim'] != null) {
				let refs = this.$refs['uxSkeletionAnim'] as any[]
				refs.forEach((ref: any | null) => {
					this.transform(ref)
				})
			}
		},
		alpha(ref: any | null) {
			if(ref == null) {
				return
			}
			
			if(!this.animate || !this.loading) {
				return
			}
			
			let el = ref as Element
			
			el?.style?.setProperty('transition-duration', `${this.duration}ms`)
			el?.style?.setProperty('opacity', 0.4)
			
			this.timer1 = setTimeout(() => {
				el?.style?.setProperty('opacity', 1)
				
				this.timer1 = setTimeout(() => {
					this.alpha(ref)
				}, this.duration);
			}, this.duration);
		},
		transform(ref: any | null) {
			
			if(ref == null) {
				return
			}
			
			if(!this.animate || !this.loading) {
				return
			}
			
			let el = ref as Element
			
			el?.style?.setProperty('transition-duration', `${this.duration}ms`)
			el?.style?.setProperty('transform', `translateX(${uni.getSystemInfoSync().windowWidth}px) rotate(20deg)`)
			
			this.timer2 = setTimeout(() => {
				el?.style?.setProperty('transition-duration', '0ms')
				el?.style?.setProperty('transform', `translateX(-50px) rotate(0deg) rotate(20deg)`)
				
				this.timer2 = setTimeout(() => {
					this.transform(ref)
				}, 20);
			}, this.duration);
		}
	}
})