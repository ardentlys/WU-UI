import {$ux} from '../../index.uts'
import { xstyleMixin } from '../../libs/mixins/xstyle.uts'

export const UxRadioGroupMixin = defineMixin({
	emits: ['update:modelValue', 'change'],
	mixins: [xstyleMixin],
	data() {
		return {
			nodes: [] as Array<UxRadioComponentPublicInstance>,
		}
	},
	props: {
		modelValue: {
			type: String,
			default: ''
		},
		direction: {
			type: String,
			default: 'row'
		},
		mode: {
			type: String,
			default: 'radio'
		},
		theme: {
			type: String,
			default: ''
		},
		shape: {
			type: String,
			default: ''
		},
		size: {
			type: Number,
			default: 0
		},
		color: {
			type: String,
			default: ''
		},
		backgroundColor: {
			type: String,
			default: ''
		},
		activeBackgroundColor: {
			type: String,
			default: ''
		},
		borderColor: {
			type: String,
			default: ''
		},
		activeBorderColor: {
			type: String,
			default: ''
		},
		disabled: {
			type: Boolean,
			default: false
		},
	},
	computed: {
		style() : any[] {
			let css = new Map<string, any | null>()
			
			css.set('flex-direction', this.direction == 'row' ? 'row' : 'column')
			
			css = $ux.Util.xStyle(css, this.margin, this.mt, this.mr, this.mb, this.ml, this.padding, this.pt, this.pr, this.pb, this.pl)
			
			return [css, this.xstyle]
		},
		parentData(): Map<string, any> {
			let data = new Map<string, any>()
			
			data.set('mode', this.mode)
			data.set('theme',  this.theme) 
			data.set('shape', this.shape)
			data.set('color', this.color)
			data.set('backgroundColor', this.backgroundColor)
			data.set('activeBackgroundColor', this.activeBackgroundColor)
			data.set('borderColor', this.borderColor)
			data.set('activeBorderColor', this.activeBorderColor)
			data.set('disabled', this.disabled)
			data.set('value', this.modelValue)  
			
			return data
		}
	},
	watch: {
		modelValue() {
			this.init()
		},
		parentData() {
			this.init()
		}
	},
	mounted() {
		this.$nextTick(() => {
			this.init()
		})
	},
	methods: {
		register(child : UxRadioComponentPublicInstance) : void {
			this.nodes.push(child)
		},
		init() {
			this.nodes.forEach((e: UxRadioComponentPublicInstance) => {
				e.setState(this.parentData)
			})
		},
		closeAll(e : UxRadioComponentPublicInstance) {
			this.nodes.forEach((instance: UxRadioComponentPublicInstance) => {
				if (instance == e) {
					this.$emit('update:modelValue', e.$props['value']! as string)
					this.$emit('change', e.$props['value']! as string)
				} else {
					e.setState(this.parentData)
				}
			})
		}
	},
})