import { $ux } from '../../index.uts'

export const UxCardMixin = defineMixin({
	emits: ['click'],
	data() {
		return {
	
		}
	},
	props: {
		// 标题
		title: {
			type: String,
			default: ''
		},
		// 标题大小
		size: {
			type: Number,
			default: 14
		},
		// 标题颜色
		color: {
			type: String,
			default: $ux.theme.main
		},
		// 标题加粗
		bold: {
			type: Boolean,
			default: false
		},
		// 标题样式
		titleStyle: {
			type: Object as PropType<any>,
			default: (): Map<string, any | null> => {
				return new Map<string, any | null>()
			}
		},
		// 描述信息
		summary: {
			type: String,
			default: ''
		},
		// 描述文本颜色
		summaryColor: {
			type: String,
			default: $ux.theme.summary
		},
		// 描述文本大小
		summarySize: {
			type: Number,
			default: 10
		},
		// 描述文本样式
		summaryStyle: {
			type: Object as PropType<any>,
			default: (): Map<string, any | null> => {
				return new Map<string, any | null>()
			}
		},
		// 标题图标
		icon: {
			type: String,
			default: ''
		},
		// 标题图标颜色
		iconColor: {
			type: String,
			default: $ux.theme.main
		},
		// 标题图标大小
		iconSize: {
			type: Number,
			default: 15
		},
		// 标题图标样式
		iconStyle: {
			type: String,
			default: ''
		},
		// 自定义字体路径
		customFont: {
			type: String,
			default: ''
		},
		// 自定义字体family
		customFamily: {
			type: String,
			default: ''
		},
		// 背景色
		background: {
			type: String,
			default: '#fff'
		},
		// 显示阴影
		shadow: {
			type: Boolean,
			default: false
		},
		// 显示边框
		border: {
			type: Boolean,
			default: false
		},
		// 边框颜色
		borderColor: {
			type: String,
			default: $ux.theme.border
		},
		// 圆角
		radius: {
			type: Number,
			default: 10
		},
		// 内部水平边距
		padding: {
			type: Number,
			default: 15
		},
		// 边距
		margin: {
			type: Number,
			default: 15
		},
		// 自定义样式
		xstyle: {
			type: Array as PropType<Array<any>>,
			default: () : Array<any> => [] as Array<any>
		},
	},
	computed: {
		style(): any | null {
			let css = new Map<string, any | null>()
			
			css.set('background-color', 'transparent')
			css.set('margin', `${$ux.Util.addUnit(this.margin)} ${$ux.Util.addUnit(this.margin)} 0 ${$ux.Util.addUnit(this.margin)}`)
			
			return css
		},
		bodyStyle() : any | null {
			let css = new Map<string, any | null>()
			
			css.set('background-color', this.background == '' ? '#fff' : this.background)
			
			if(this.shadow) {
				css.set('box-shadow', `0 0 5px 5px ${this.borderColor}`)
			}
			
			if(this.border) {
				css.set('border-bottom', `1rpx solid ${this.borderColor}`)
			}
			
			css.set('border-radius', $ux.Util.addUnit(this.radius))
			
			return css
		},
		rowPadding():string {
			return `padding: ${this.title != ''?0:$ux.Util.addUnit(this.padding)} ${$ux.Util.addUnit(this.padding)} ${$ux.Util.addUnit(this.padding)} ${$ux.Util.addUnit(this.padding)}`
		},
		titlePadding():string {
			return `padding: 15px 15px 0 15px`
		},
		_titleStyle() : any | null {
			let css = new Map<string, any | null>()
			
			css.set('font-size', $ux.Util.addUnit(this.size))
			css.set('color', this.color)
			css.set('font-weight', this.bold?'bold':'normal')
			
			return css
		},
		_summaryStyle() : any | null {
			let css = new Map<string, any | null>()
			
			css.set('font-size', $ux.Util.addUnit(this.summarySize))
			css.set('color', this.summaryColor)
			
			return css
		},
	},
	methods: {
		
	}
})