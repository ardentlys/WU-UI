import { $ux } from '../../index.uts'
import { UXSliderEvent } from "../../libs/types/types.uts"
import { xstyleMixin } from '../../libs/mixins/xstyle.uts'

type EmitNames = 'change' | 'changing'

export const UxSliderMixin = defineMixin({
	emits: ['change', 'changing'],
	mixins: [xstyleMixin],
	data() {
		return {
			ctx: null as DrawableContext | null,
			_values: [] as number[],
			sliderWidth: 0,
			sliderHeight: 0,
			firstPos: 0,
			secondPos: 0,
			firstSelected: false,
			secondSelected: false,
			text1: '',
			text2: ''
		}
	},
	props: {
		// 模式
		mode: {
			type: String,
			default: 'normal',
		},
		// 方向
		direction: {
			type: String,
			default: 'horizontal',
		},
		// 最小值
		min: {
			type: Number,
			default: 0,
		},
		// 最大值
		max: {
			type: Number,
			default: 100,
		},
		// 步长
		step: {
			type: Number,
			default: 1,
		},
		// 当前取值
		value: {
			type: Number,
			default: 0
		},
		// 当前范围取值
		values: {
			type: Array,
			default: () : number[] => {
				return [0, 10] as number[]
			}
		},
		// 已选择部分的线条颜色
		activeColor: {
			type: String,
			default: $ux.theme.primary
		},
		// 背景条颜色
		backgroundColor: {
			type: String,
			default: $ux.theme.background
		},
		// 滑块的大小
		blockSize: {
			type: Number,
			default: 22,
		},
		// 滑块颜色
		blockColor: {
			type: String,
			default: '#ffffff'
		},
		// 是否显示当前 value
		showValue: {
			type: Boolean,
			default: false
		},
		// 显示方式
		showMode: {
			type: String,
			default: 'top'
		},
		// 单位
		unit: {
			type: String,
			default: '%'
		},
	},
	computed: {
		style() : any | null {
			let css = new Map<string, any | null>()
	
			if (this.direction == 'vertical') {
				css.set('width', '40px')
				css.set('height', '100%')
			} else {
				css.set('width', '100%')
				css.set('height', '40px')
			}
	
			css = $ux.Util.xStyle(css, this.margin, this.mt, this.mr, this.mb, this.ml, this.padding, this.pt, this.pr, this.pb, this.pl)
			
			return css
		},
		bgStyle() : any | null {
			let css = new Map<string, any | null>()
			
			css.set('background-color', this.backgroundColor)
			
			if (this.direction == 'vertical') {
				css.set('left', $ux.Util.addUnit((this.sliderHeight - this.progressHeight) / 2))
				css.set('top', $ux.Util.addUnit(this.blockSize / 2))
				css.set('width', $ux.Util.addUnit(this.progressHeight))
				css.set('height', $ux.Util.addUnit(this.progressWidth))
			} else {
				css.set('left', $ux.Util.addUnit(this.blockSize / 2))
				css.set('top', $ux.Util.addUnit((this.sliderHeight - this.progressHeight) / 2))
				css.set('width', $ux.Util.addUnit(this.progressWidth))
				css.set('height', $ux.Util.addUnit(this.progressHeight))
			}
			
			return css
		},
		progressStyle(): any | null {
			let css = new Map<string, any | null>()
			
			css.set('background-color', this.activeColor)
			
			if (this.direction == 'vertical') {
				if (this.mode == 'range') {
					const width = Math.abs(this.secondPos - this.firstPos)
					const left = Math.min(this.firstPos, this.secondPos) + this.blockSize / 2
					
					css.set('left', $ux.Util.addUnit((this.sliderHeight - this.progressHeight) / 2))
					css.set('top', $ux.Util.addUnit(left))
					css.set('width', $ux.Util.addUnit(this.progressHeight))
					css.set('height', $ux.Util.addUnit(width))
				} else {
					css.set('left', $ux.Util.addUnit((this.sliderHeight - this.progressHeight) / 2))
					css.set('top', $ux.Util.addUnit(this.blockSize / 2))
					css.set('width', $ux.Util.addUnit(this.progressHeight))
					css.set('height', $ux.Util.addUnit(this.firstPos))
				}
			} else {
				if (this.mode == 'range') {
					const width = Math.abs(this.secondPos - this.firstPos)
					const left = Math.min(this.firstPos, this.secondPos) + this.blockSize / 2
					
					css.set('left', $ux.Util.addUnit(left))
					css.set('top', $ux.Util.addUnit((this.sliderHeight - this.progressHeight) / 2))
					css.set('width', $ux.Util.addUnit(width))
					css.set('height', $ux.Util.addUnit(this.progressHeight))
				} else {
					css.set('left', $ux.Util.addUnit(this.blockSize / 2))
					css.set('top', $ux.Util.addUnit((this.sliderHeight - this.progressHeight) / 2))
					css.set('width', $ux.Util.addUnit(this.firstPos))
					css.set('height', $ux.Util.addUnit(this.progressHeight))
				}
			}
			
			return css
		},
		block1Style() : any | null {
			let css = new Map<string, any | null>()
			
			const size = this.blockSize / 2 - 2
			const top = (this.sliderHeight - size) / 2
			
			css.set('background-color', this.blockColor)
			css.set('width', $ux.Util.addUnit(size * 2))
			css.set('height', $ux.Util.addUnit(size * 2))
			css.set('border-radius', $ux.Util.addUnit(size * 2))
			
			if (this.direction == 'vertical') {
				css.set('left', $ux.Util.addUnit(top - size / 2))
				css.set('top', $ux.Util.addUnit(this.firstPos - size + 2))
			} else {
				css.set('left', $ux.Util.addUnit(this.firstPos - size + 2))
				css.set('top', $ux.Util.addUnit(top - size / 2))
			}
			
			return css
		},
		block2Style() : any | null {
			let css = new Map<string, any | null>()
			
			const size = this.blockSize / 2 - 2
			const top = (this.sliderHeight - size) / 2
			
			css.set('background-color', this.blockColor)
			css.set('width', $ux.Util.addUnit(size * 2))
			css.set('height', $ux.Util.addUnit(size * 2))
			css.set('border-radius', $ux.Util.addUnit(size * 2))
			
			if (this.direction == 'vertical') {
				css.set('left', $ux.Util.addUnit(top - size / 2))
				css.set('top', $ux.Util.addUnit(this.secondPos - size + 2))
			} else {
				css.set('left', $ux.Util.addUnit(this.secondPos - size + 2))
				css.set('top', $ux.Util.addUnit(top - size / 2))
			}
			
			return css
		},
		text1Style() : any | null {
			let css = new Map<string, any | null>()
			
			const size = this.blockSize
			const top = (this.sliderHeight - size) / 2
			
			let textLeft = this.firstPos - size / 2
			let textTop = top - size / 2
			if (this.showMode == 'bottom') {
				textTop = top + size - 5
			}
			
			if (this.getValue(this.firstPos) >= this.max) {
				textLeft = this.firstPos - 5
			}
			
			css.set('left', $ux.Util.addUnit(textLeft))
			css.set('top', $ux.Util.addUnit(textTop))
			
			this.text1 = `${this.getValue(this.firstPos)}${this.unit}`
			
			return css
		},
		text2Style() : any | null {
			let css = new Map<string, any | null>()
			
			const size = this.blockSize
			const top = (this.sliderHeight - size) / 2
			
			let textLeft = this.secondPos - size / 2
			let textTop = top - size / 2
			if (this.showMode == 'bottom') {
				textTop = top + size - 5
			}
			
			if (this.getValue(this.secondPos) >= this.max) {
				textLeft = this.secondPos - 5
			}
			
			css.set('left', $ux.Util.addUnit(textLeft))
			css.set('top', $ux.Util.addUnit(textTop))
			
			this.text2 = `${this.getValue(this.secondPos)}${this.unit}`
			
			return css
		},
		progressWidth() : number {
			return this.sliderWidth - this.blockSize
		},
		progressHeight() : number {
			return 2
		},
	},
	mounted() {
		this._values = this.values as number[]
		
		uni.createSelectorQuery().in(this).select('.ux-slider').boundingClientRect().exec((ret) => {
			this.init()
		})
	},
	methods: {
		init() {
			// #ifdef APP
			this.ctx = (this.$refs['uxSlider'] as Element).getDrawableContext()
			// #endif
	
			if (this.direction == 'vertical') {
				this.sliderWidth = (this.$refs['uxSlider'] as Element).getBoundingClientRect().height
				this.sliderHeight = (this.$refs['uxSlider'] as Element).getBoundingClientRect().width
			} else {
				this.sliderWidth = (this.$refs['uxSlider'] as Element).getBoundingClientRect().width
				this.sliderHeight = (this.$refs['uxSlider'] as Element).getBoundingClientRect().height
			}
	
			if (this.mode == 'range') {
				if (this._values.length == 2) {
					this._values.sort(function (a : any | null, b : any | null) : number {
						return (a! as number) - (b! as number)
					})
	
					this.firstPos = this.getPos(this._values[0] as number)
					this.secondPos = this.getPos(this._values[1] as number)
				} else {
					this._values = Array(0, 10)
				}
			} else {
				this.firstPos = this.getPos(this.value)
			}
	
			this.draw()
		},
		draw() {
			// #ifdef APP
			this.ctx!.reset()
				
			this.drawBg()
			this.drawProgress()
			this.drawBlock()
				
			this.ctx!.update()
			// #endif
		},
		drawBg() {
			this.ctx!.fillStyle = this.backgroundColor
	
			if (this.direction == 'vertical') {
				this.ctx!.fillRect((this.sliderHeight - this.progressHeight) / 2, this.blockSize / 2, this.progressHeight, this.progressWidth)
			} else {
				this.ctx!.fillRect(this.blockSize / 2, (this.sliderHeight - this.progressHeight) / 2, this.progressWidth, this.progressHeight)
			}
		},
		drawProgress() {
			this.ctx!.fillStyle = this.activeColor
	
			if (this.direction == 'vertical') {
				if (this.mode == 'range') {
					const width = Math.abs(this.secondPos - this.firstPos)
					const left = Math.min(this.firstPos, this.secondPos) + this.blockSize / 2
	
					this.ctx!.fillRect((this.sliderHeight - this.progressHeight) / 2, left, this.progressHeight, width)
				} else {
					this.ctx!.fillRect((this.sliderHeight - this.progressHeight) / 2, this.blockSize / 2, this.progressHeight, this.firstPos)
				}
			} else {
				if (this.mode == 'range') {
					const width = Math.abs(this.secondPos - this.firstPos)
					const left = Math.min(this.firstPos, this.secondPos) + this.blockSize / 2
	
					this.ctx!.fillRect(left, (this.sliderHeight - this.progressHeight) / 2, width, this.progressHeight)
				} else {
					this.ctx!.fillRect(this.blockSize / 2, (this.sliderHeight - this.progressHeight) / 2, this.firstPos, this.progressHeight)
				}
			}
		},
		drawBlock() {
			const size = this.blockSize / 2 - 2
			const top = (this.sliderHeight - size) / 2
	
			this.ctx!.beginPath()
			if (this.direction == 'vertical') {
				this.ctx!.arc(top + size / 2, this.firstPos + size + 2, size, 0, Math.PI * 2)
			} else {
				this.ctx!.arc(this.firstPos + size + 2, top + size / 2, size, 0, Math.PI * 2)
			}
			this.ctx!.closePath()
	
			this.ctx!.fillStyle = this.blockColor
			this.ctx!.fill()
	
			this.ctx!.strokeStyle = '#f0f0f0'
			this.ctx!.stroke()
	
			if (this.showValue && this.direction != 'vertical') {
				let textLeft = this.firstPos + 4
				let textTop = top - 7
				if (this.showMode == 'bottom') {
					textTop = top + this.blockSize
				}
	
				if (this.getValue(this.firstPos) >= this.max) {
					textLeft = this.firstPos - 5
				}
	
				this.ctx!.fillStyle = '#333'
				this.ctx!.fillText(`${this.getValue(this.firstPos)}${this.unit}`, textLeft, textTop)
			}
	
			if (this.mode == 'range') {
				this.ctx!.beginPath()
				if (this.direction == 'vertical') {
					this.ctx!.arc(top + size / 2, this.secondPos + size + 2, size, 0, Math.PI * 2)
				} else {
					this.ctx!.arc(this.secondPos + size + 2, top + size / 2, size, 0, Math.PI * 2)
				}
				this.ctx!.closePath()
	
				this.ctx!.fillStyle = this.blockColor
				this.ctx!.fill()
	
				this.ctx!.strokeStyle = '#f0f0f0'
				this.ctx!.stroke()
	
				if (this.showValue && this.direction != 'vertical') {
					let textLeft = this.secondPos + 4
					let textTop = top - 7
					if (this.showMode == 'bottom') {
						textTop = top + this.blockSize
					}
	
					if (this.getValue(this.secondPos) >= this.max) {
						textLeft = this.secondPos - 5
					}
	
					this.ctx!.fillStyle = '#333'
					this.ctx!.fillText(`${this.getValue(this.secondPos)}${this.unit}`, textLeft, textTop)
				}
			}
		},
		touchstart(e : TouchEvent) {
			if (this.disabled) {
				return
			}
	
			let pos = 0
	
			if (this.direction == 'vertical') {
				pos = e.changedTouches[0].clientY - e.currentTarget!.getBoundingClientRect().top
			} else {
				pos = e.changedTouches[0].clientX - e.currentTarget!.getBoundingClientRect().left
			}
	
			this.firstSelected = Math.abs(pos - this.firstPos) <= this.blockSize
	
			if (!this.firstSelected && this.mode == 'range') {
				this.secondSelected = Math.abs(pos - this.secondPos) <= this.blockSize
			}
		},
		touchmove(e : TouchEvent) {
			e.preventDefault()
			
			if (this.disabled) {
				return
			}
	
			let pos = 0
	
			if (this.direction == 'vertical') {
				pos = e.changedTouches[0].clientY - e.currentTarget!.getBoundingClientRect().top
			} else {
				pos = e.changedTouches[0].clientX - e.currentTarget!.getBoundingClientRect().left
			}
	
			if (this.firstSelected) {
				this.firstPos = Math.ceil(pos / this.step) * this.step
	
				if (this.firstPos >= this.progressWidth) {
					this.firstPos = this.progressWidth
				} else if (this.firstPos <= 0) {
					this.firstPos = 0
				}
	
				this.draw()
				this.emit('changing')
			}
	
			if (this.mode == 'range') {
				if (this.secondSelected) {
					this.secondPos = Math.ceil(pos / this.step) * this.step
	
					if (this.secondPos >= this.progressWidth) {
						this.secondPos = this.progressWidth
					} else if (this.secondPos <= 0) {
						this.secondPos = 0
					}
	
					this.draw()
					this.emit('changing')
				}
			}
		},
		touchend(e : TouchEvent) {
			e.preventDefault()
			
			if (this.disabled) {
				return
			}
	
			this.firstSelected = false
			this.secondSelected = false
	
			this.emit('change')
		},
		emit(event : EmitNames) {
			if (this.mode == 'range') {
				this.$emit(event, {
					value: 0,
					values: [this.getValue(this.firstPos), this.getValue(this.secondPos)].sort((a : number, b : number) : number => a - b),
				} as UXSliderEvent)
			} else {
				this.$emit(event, {
					value: this.getValue(this.firstPos),
					values: [] as number[],
				} as UXSliderEvent)
			}
		},
		getValue(x : number) : number {
			let value = Math.round((x / this.progressWidth) * (this.max - this.min))
			return this.min + Math.round(value / this.step) * this.step
		},
		getPos(value : number) : number {
			return Math.round(value / (this.max - this.min) * this.progressWidth)
		}
	},
})