import {$ux} from '../../index.uts'
import { xstyleMixin } from '../../libs/mixins/xstyle.uts'

export const UxRadioMixin = defineMixin({
	emits: ['update:modelValue', 'change'],
	mixins: [xstyleMixin],
	data() {
		return {
			checked: false,
			parent: new Map<string, any>(),
		}
	},
	props: {
		value: {
			type: String,
			default: ''
		},
		modelValue: {
			type: String,
			default: ''
		},
		mode: {
			type: String,
			default: 'radio'
		},
		theme: {
			type: String,
			default: "primary"
		},
		shape: {
			type: String,
			default: 'circle'
		},
		text: {
			type: String,
			default: ''
		},
		size: {
			type: Number,
			default: 14
		},
		color: {
			type: String,
			default: $ux.theme.main
		},
		backgroundColor: {
			type: String,
			default: $ux.theme.background
		},
		activeBackgroundColor: {
			type: String,
			default: ''
		},
		borderColor: {
			type: String,
			default: $ux.theme.border
		},
		activeBorderColor: {
			type: String,
			default: ''
		},
		disabled: {
			type: Boolean,
			default: false
		},
	},
	computed: {
		_mode(): any {
			let value = this.parent.has('mode') ? this.parent.get('mode') as string : ''
			return value == '' ? this.mode : value
		},
		_theme(): any {
			let value = this.parent.has('theme') ? this.parent.get('theme') as string : ''
			return value == '' ? this.theme : value
		},
		_themeColor() : any {
			switch (this._theme) {
				case 'info':
					return $ux.theme.main!
				case 'primary':
					return $ux.theme.primary!
				case 'warn':
					return $ux.theme.warn!
				case 'success':
					return $ux.theme.success!
				case 'error':
					return $ux.theme.error!
				case 'title': 
					return $ux.theme.title!
				default:
					return $ux.theme.primary!
			}
		},
		_shape(): string {
			let value = this.parent.has('shape') ? this.parent.get('shape') as string : ''
			return value == '' ? this.shape : value
		},
		_size(): number {
			let value = this.parent.has('size') ? this.parent.get('size') as number : 0
			return value == 0 ? this.size : value
		},
		_color(): any {
			let value = this.parent.has('color') ? this.parent.get('color') as string : ''
			return value == '' ? this.color : value
		},
		_backgroundColor(): string {
			let value = this.parent.has('backgroundColor') ? this.parent.get('backgroundColor') as string : ''
			return value == '' ? this.backgroundColor : value
		},
		_activeBackgroundColor(): string {
			let value = this.parent.has('activeBackgroundColor') ? this.parent.get('activeBackgroundColor') as string : ''
			return value == '' ? this.activeBackgroundColor : value
		},
		_borderColor(): string {
			let value = this.parent.has('borderColor') ? this.parent.get('borderColor') as string : ''
			return value == '' ? this.borderColor : value
		},
		_activeBorderColor(): string {
			let value = this.parent.has('activeBorderColor') ? this.parent.get('activeBorderColor') as string : ''
			return value == '' ? this.activeBorderColor : value
		},
		_disabled(): boolean {
			let value = this.parent.has('disabled') ? this.parent.get('disabled') as boolean : false
			return value == false ? this.disabled : value
		},
		style() : any[] {
			let css = new Map<string, any | null>()
			
			if(this._mode == 'radio') {
				css.set('display', 'flex')
				css.set('flex-direction', 'row')
			}
			
			css = $ux.Util.xStyle(css, this.margin, this.mt, this.mr, this.mb, this.ml, this.padding, this.pt, this.pr, this.pb, this.pl)
		
			return [css, this.xstyle]
		},
		radioStyle() : any | null {
			let css = new Map<string, any | null>()
			
			if (this._shape == 'circle') {
				css.set('border-radius', '100px')
			} else {
				css.set('border-radius', '4px')
			}
			
			if (this.checked) {
				css.set('background-color', this._activeBackgroundColor == '' ? this._themeColor : this._activeBackgroundColor)
				css.set('border-color', this._activeBorderColor == '' ? this._themeColor : this._activeBorderColor)
			} else {
				css.set('background-color', this._backgroundColor)
				css.set('border-color', this._borderColor)
			}
		
			return css
		},
		textStyle() : any | null {
			let css = new Map<string, any | null>()
			
			css.set('color', this._disabled? $ux.theme.disabled : this._color)
			css.set('font-size', $ux.Util.addUnit(this._size))
		
			return css
		},
	},
	watch: {
		modelValue: {
			handler(_a: string, _: string) {
				this.checked = this.value == this.modelValue
			},
			immediate: true
		}   
	},
	mounted() {
		$ux.Util.$dispatch(this as UxRadioComponentPublicInstance, 'ux-radio-group', 'register', this as UxRadioComponentPublicInstance)
	},
	methods: {
		setState(data : Map<string, any>) {
			this.parent = data
			this.checked = this.value == data.get('value')! as string
		},
		click() {
			if (!this._disabled) {
				this.checked = true
				
				this.$emit('update:modelValue', this.value)
				this.$emit('change', this.value)
				$ux.Util.$dispatch(this as UxRadioComponentPublicInstance, 'ux-radio-group', 'closeAll', this as UxRadioComponentPublicInstance)
			}
		},
	},
})