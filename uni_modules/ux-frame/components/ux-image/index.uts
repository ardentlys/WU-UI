import { $ux } from '../../index.uts'
import { xstyleMixin } from '../../libs/mixins/xstyle.uts'

export const UxImageMixin = defineMixin({
	emits: ['click', 'load', 'error'],
	mixins: [xstyleMixin],
	data() {
		return {
			myId: `ux-image-${$ux.Random.uuid()}`,
			isLoading: true,
			isError: true,
			isPreview: false,
		}
	},
	props: {
	    // 图片地址
	    src: {
	        type: String,
	        default: ''
	    },
		// 图片预览列表
		previewList: {
		    type: Array,
		    default: ():string[] => {
				return [] as string[]
			}
		},
		// 图片预览模式
		previewMode: {
			type: String,
			default: 'normal'
		},
	    // 裁剪模式
	    mode: {
	        type: String,
	        default: 'aspectFill'
	    },
	    // 宽度
	    width: {
	        type: Number,
	        default: 75
	    },
	    // 高度
	    height: {
	        type: Number,
	        default: 75
	    },
	    // 图片形状
	    shape: {
	        type: String,
	        default: ''
	    },
	    // 圆角
	    radius: {
	        type: Number,
	        default: 0
	    },
	    // 是否显示加载中的图标或者自定义的slot
	    showLoading: {
	        type: Boolean,
	        default: true
	    },
	    // 是否显示加载错误的图标或者自定义的slot
	    showError: {
	        type: Boolean,
	        default: true
	    },
	    // 加载失败的图标，或者小图片
	    errorIcon: {
	        type: String,
	        default:'picture'
	    },
		// 图标大小
		iconSize: {
			type: Number,
			default: 25
		},
	    // 是否需要淡入效果
	    fade: {
	        type: Boolean,
	        default: true
	    },
	},
	computed: {
		style(): any[] {
			let css = new Map<string, any | null>()
			
			css.set('width', $ux.Util.addUnit(this.width))
			css.set('height', $ux.Util.addUnit(this.height))
		
			if(this.shape == 'circle') {
				css.set('border-radius', '500px')
			} else if(this.shape == 'square') {
				css.set('border-radius', `${$ux.Util.addUnit(this.radius == 0 ? 5 : this.radius)}`)
			} else if(this.radius > 0) {
				css.set('border-radius', `${$ux.Util.addUnit(this.radius)}`)
			}
			
			css = $ux.Util.xStyle(css, this.margin, this.mt, this.mr, this.mb, this.ml, this.padding, this.pt, this.pr, this.pb, this.pl)
			
			return [css, this.xstyle]
		},
		maskStyle(): string {
			
			if(this.shape == 'circle') {
				return `border-radius: 500px`
			} else if(this.shape == 'square') {
				return `border-radius: ${$ux.Util.addUnit(this.radius == 0 ? 5 : this.radius)}`
			} else if(this.radius > 0) {
				return `border-radius: ${$ux.Util.addUnit(this.radius)}`
			}
			
			return ''
		},
	},
	watch: {
		src() {
			this.isLoading = true
			this.isError = false
		}
	},
	mounted() {
		
	},
	methods: {
		click(e: MouseEvent) {
			
			if(this.previewList.length > 0 && !this.isError) {
				let urls = [] as string[]
				this.previewList.forEach((url: any | null) => {
					urls.push(url! as string)
				})
				
				// TODO 未完成
				if(this.previewMode == 'hero') {
					// this.isPreview = true
					
					// let ref = this.$refs['uxPreview'] as UxPreviewComponentPublicInstance
					
					// ref.preview({
					// 	current: this.src,
					// 	currentId: this.myId,
					// 	urls: urls,
					// 	close: () => {
					// 		this.isPreview = false
					// 	}
					// } as UXPreview)
				} else {
					uni.previewImage({
						current: this.src,
						urls: urls,
					})
				}
			}
			
			// this.$emit('click', e)
		},
		error(e: ImageErrorEvent) {
			this.isLoading = false
			this.isError = true
			
			this.$emit('error', e)
		},
		load(e: ImageLoadEvent) {
			this.isLoading = false
			this.isError = false
			
			this.$emit('load', e)
		},
	}
})